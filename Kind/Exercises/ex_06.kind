// Integer Exercises

// Integers
type Inte { 
  neg(num: Neg)
  pos(num: Pos)
}

// Positive Numbers
type Pos { 
  zero
  succ(pred: Pos)
}

// Negative Numbers
type Neg { 
  one
  pred(succ: Neg)
}

// example
// -0 does not exist
// Increments a negative number by one
neg_succ(n: Neg): Neg
  case n { 
    one:  Neg.one
    pred: n.succ
  }

// Functions for negative numbers to help testing 
// Do not edit those functions

// Converts Neg to Nat
neg_to_nat(n: Neg): Nat
  case n { 
    one:  Nat.succ(Nat.zero)
    pred: Nat.succ(neg_to_nat(n.succ))
  }
  
// Converts Nat to Neg
nat_to_neg(n: Nat): Neg
  neg_succ(nat_to_neg_aux(n))
  
  // Aux function for Nat.to_neg
nat_to_neg_aux(n: Nat): Neg
  case n {
    zero: Neg.one
    succ: Neg.pred(nat_to_neg_aux(n.pred))
  }

// Converts Pos to Nat
pos_to_nat(n: Pos): Nat
  case n { 
    zero:  Nat.zero
    succ:  Nat.succ(pos_to_nat(n.pred))
  }

// Converts Nat to Pos
nat_to_pos(n: Nat): Pos
  case n { 
    zero: Pos.zero
    succ: Pos.succ(nat_to_pos(n.pred))
  }

// Converts Pos to String
pos_show(n: Pos): String
  "+"|Nat.show(pos_to_nat(n))

// Converts Neg to String
neg_show(n: Neg): String
  "-"|Nat.show(neg_to_nat(n))

// Converts Int to String
inte_show(n: Inte): String
  case n {
    neg: neg_show(n.num) 
    pos: pos_show(n.num) 
  }

// Converts Inte to Nat
inte_to_nat(n: Inte): Nat
  case n { 
    neg: neg_to_nat(n.num)
    pos: pos_to_nat(n.num)
  }

// Creates an int sign
// true  = Positive 
// false = Negative
int(sign: Bool, num: Nat): Inte
  case sign {
    true: Inte.pos(nat_to_pos(num))
    false:
      case num {
        zero: Inte.pos(Pos.zero)
        succ: Inte.neg(nat_to_neg(num))
      }
  }


// Exercises:

// Increments an Integer
// int(false, 1)     = +0
// int(false, 2)     = -1
// int(true,  2)     = +3
inc(a: Inte): Inte
  case a{
    neg: case a.num{
      one: Inte.pos(Pos.zero)
      pred: Inte.neg(a.num.succ)
    }
    pos: Inte.pos(Pos.succ(a.num))
  }

// Decrements an Integer
// int(false, 1) = -2
// int(true,  2) = +1
// int(true,  0) = -1
dec(a: Inte): Inte
  case a{
    neg: Inte.neg(Neg.pred(a.num))
    pos: case a.num{
      zero: Inte.neg(Neg.one)
      succ: Inte.pos(a.num.pred)
    }
  }

p2: Inte
   int(true, 2)

p4: Inte
  int(true, 4)   

p5: Inte
  int(true, 5)

p6: Inte
  int(true, 6)

p9: Inte
  int(true, 9)

n5: Inte
  int(false, 5)

n2: Inte
  int(false, 2)

n0: Inte
  int(false, 0)

n4: Inte
  int(false, 4)

n6: Inte
  int(false, 6)

// Doubles an Integer
// int(false, 4) = -8
// int(false, 1) = -2
// int(true,  2) = +4
dbl(a: Inte): Inte 
  case a{
    neg: dec(dec(dbl(inc(a))))
    pos: case a.num{
      zero: Inte.pos(Pos.zero)
      succ: inc(inc(dbl(Inte.pos(a.num.pred))))
    }
  }

teste1:_
  inte_show(dbl(p6))

// Adds two Integers
// int(false, 4) + int(false, 2) = -6
// int(false, 4) + int(true,  2) = -2
//vih me ajudou nessa
add(a: Inte, b: Inte): Inte
  let nata = inte_to_nat(a)
  let natb = inte_to_nat(b)
  case a{
    neg: case b{
      neg: let negab = Nat.add(nata, natb)
      int(false, negab)
      pos: case b.num{
        zero: a
        succ: case Nat.eql(nata, natb){
          true: Inte.pos(Pos.zero)
          false: let subab = Nat.sub(nata, natb)
            int(true, subab)
        }
      }
    }
    pos: case b{
      neg: case a.num{
        zero: b
        succ: case Nat.eql(nata, natb){
          true: Inte.pos(Pos.zero)
          false: let subab = Nat.sub(nata, natb)
            int(true, subab)
        }
      }
      pos: let somaab = Nat.add(nata, natb)
        int(true, somaab)
    }
  }
  // case a{
  //   neg: case a.num(
  //     one: case b{
  //       neg: case b.num{
  //         one: dec(Inte.neg(Neg.one))
  //         pred: dec(b.num)
  //       }
  //       pos: case b.num{
  //         zero: a.num
  //         succ: dec(Inte.pos(b.num))
  //       }
  //     }
  //     pred: case b{

  //     }
  //   )
  //   pos: Nat.add(nata, natb)
  // }

teste2:_
  inte_show(add(p2, p6))

// Multiplies two Integers
// int(false, 2) * int(true, 3)  = -6
// int(false, 4) * int(false, 5) = +20
mul(a: Inte, b: Inte): Inte
  let nata = inte_to_nat(a)
  let natb = inte_to_nat(b)
  case a b{
    neg neg: let mulab = Nat.mul(nata, natb)
      int(true, mulab)
    neg pos: case b.num{
      zero: Inte.pos(Pos.zero)
      succ: let mulab = Nat.mul(nata, natb)
        int(false, mulab)
    }
    pos neg: case a.num{
      zero: Inte.pos(Pos.zero)
      succ: let mulab = Nat.mul(nata, natb)
        int(false, mulab)
    }
    pos pos: let mulab = Nat.mul(nata, natb)
      int(true, mulab)
  }

// Subtracts two Integers
// int(false, 6) - int(false, 6) = +0
// int(false, 4) - int(false, 6) = +2
sub(a: Inte, b: Inte): Inte
  let nata = inte_to_nat(a)
  let natb = inte_to_nat(b)
  case a b{
    neg neg: case Nat.eql(nata, natb){
      true: Inte.pos(Pos.zero)
      false: case Nat.gtn(nata, natb){
        true: let subap = Nat.sub(nata, natb)
          int(false, subap)
        false: let subap = Nat.sub(natb, nata)
          int(true, subap)
      }
    }
    neg pos: let subap = Nat.add(nata, natb)
      int(false, subap)
    pos neg: let subap = Nat.add(nata, natb)
      int(true, subap)
    pos pos: case Nat.eql(nata, natb){
      true: Inte.pos(Pos.zero)
      false: case Nat.gtn(nata, natb){
        true: let subap = Nat.sub(nata, natb)
          int(true, subap)
        false: let subap = Nat.sub(natb, nata)
          int(false, subap)
      }
    }
  }

// Equal
eql(a: Inte, b: Inte): Bool // Given two Integers, returns true if both are the same and false otherwise.
  let nata = inte_to_nat(a)
  let natb = inte_to_nat(b)
  case a b{
    neg neg: case Nat.eql(nata, natb){
      true: Bool.true
      false: Bool.false
    }
    pos neg: Bool.false
    neg pos: Bool.false
    pos pos: case Nat.eql(nata, natb){
      true: Bool.true
      false: Bool.false
    }
  }


// Greater than
// int(false, 2) > int(false, 5) = True
// int(false, 5) > int(false, 1) = False
// int(false, 2) > int(true,  0) = False
// int(true,  0) > int(false, 2) = True
gtn(a: Inte, b: Inte): Bool // if A > B then True else false
  let nata = inte_to_nat(a)
  let natb = inte_to_nat(b)
  case a b{
    neg neg: case Nat.eql(nata, natb){
      true: Bool.false
      false: case Nat.gtn(nata, natb){
        true: Bool.false
        false: Bool.true
      }
    }
    neg pos: Bool.false
    pos neg: Bool.true
    pos pos: case Nat.eql(nata, natb){
      true: Bool.false
      false: case Nat.gtn(nata, natb){
        true: Bool.true
        false: Bool.false
      }
    }
  }
// Lower than
// int(false, 1) < int(true,  0) = True
// int(true,  0) < int(false, 1) = False
ltn(a: Inte, b: Inte): Bool // if A > B then False else true
  let nata = inte_to_nat(a)
  let natb = inte_to_nat(b)
  case a b{
    neg neg: case Nat.eql(nata, natb){
      true: Bool.false
      false: case Nat.gtn(nata, natb){
        true: Bool.true
        false: Bool.false
      }
    }
    neg pos: Bool.true
    pos neg: Bool.false
    pos pos: case Nat.eql(nata, natb){
      true: Bool.false
      false: case Nat.gtn(nata, natb){
        true: Bool.false
        false: Bool.true
      }
    }
  }

// Minimum
// min(int(false, 1), int(true,  0)  = -1
// min(int(false, 1), int(false, 3)) = -3
min(a: Inte, b: Inte): Inte // if A < B then A else B
  case ltn(a, b){
    true: a
    false: b
  }

// Maximum
// max(int(false, 1), int(true,  0)) = +0
// max(int(false, 1), int(false, 3)) = -1
max(a: Inte, b: Inte): Inte // if A > B then A else B
  case gtn(a, b){
    true: a
    false: b}

// Half
// Divides an Integer by two
// int(false, 4) = -2
// int(false, 1) = +0
// int(true,  6) = +3
hlf(a: Inte): Inte
  ?hlf

// Division
// int(true,  2)  / int(true,  2)  = +1
// int(false, 8)  / int(true,  4)  = -2
// int(false, 11) / int(false, 5)  = +2
// int(true,  10) / int(false, 12) = +0
div(a: Inte, b: Inte): Inte 
  ?div

ex_06: IO<Unit>
  IO {
    Tests._06.inc(inc)
    Tests._06.dec(dec)
    Tests._06.dbl(dbl)
    Tests._06.add(add)
    Tests._06.mul(mul)
    Tests._06.sub(sub)
    Tests._06.eql(eql)
    Tests._06.gtn(gtn)
    Tests._06.ltn(ltn)
    Tests._06.min(min)
    Tests._06.max(max)
    Tests._06.hlf(hlf)
    Tests._06.div(div)
  }
